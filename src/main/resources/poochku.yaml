openapi: 3.0.3
info:
  title: Poochku API
  version: 1.0.0
  description: Poochku API documentation
servers:
  - url: http://localhost:8080/api/v1
paths:
  /auth/login:
    post:
      summary: Authenticate a User
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: User Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponseDto'
        '403':
          description: Token not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '404':
          description: Username not Valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: Retrieve a user by ID
      operationId: requestUserInfo
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters
  /seller:
    post:
      summary: Create a new seller account
      operationId: createSellerAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerDto'
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDto'
  /seller/{sellerId}:
    get:
      summary: Retrieve a seller by ID
      operationId: requestSellerInfo
      parameters:
        - name: sellerId
          in: path
          description: ID of the seller
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Seller Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDto'
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters
  /pet/{petId}:
    get:
      summary: Retrieve Pet details
      operationId: requestPetInfo
      parameters:
        - name: petId
          in: path
          description: ID of Pet in Database
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pet Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters
    delete:
      summary: Delete a Pet
      operationId: deletePetDetails
      parameters:
        - name: petId
          in: path
          description: ID of Pet in Database
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pet deleted
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters
  /pet:
    get:
      summary: Get Pet list for a service
      operationId: getPetByService
      parameters:
        - name: serviceCode
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: 'The page number (default: 0)'
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description:
           'The number of items per page (default: 10)'
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of Pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPetResponseDto'
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters
    post:
      summary: Add a new pet for a seller
      operationId: addNewPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewPetReqDto'
      responses:
        '200':
          description: New Pet Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNewPetReqDto'
        '400':
          description: Bad request. Missing required parameters
        '500':
          description: Internal Server Error
    put:
      summary: Update pet details
      operationId: updatePetDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewPetReqDto'
      responses:
        '200':
          description: New Pet Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNewPetReqDto'
        '400':
          description: Bad request. Missing required parameters
        '404':
          description: Pet not Found
        '500':
          description: Internal Server Error

  /pet/search:
    get:
      summary: Search for pets with params
      operationId: getPetByParams
      parameters:
        - name: serviceCode
          in: query
          required: true
          schema:
            type: string
        - name: location
          in: query
          required: false
          schema:
            type: string
        - name: breed
          in: query
          required: false
          schema:
            type: string
        - name: gender
          in: query
          required: false
          schema:
            type: string
        - name: quality
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'The page number (default: 0)'
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description:
            'The number of items per page (default: 10)'
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of Pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPetResponseDto'
        '404':
          description: Not Found
        '400':
          description: Bad Request. Missing required parameters

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: long
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNo:
          type: string

    UserResponseDto:
      type: object
      properties:
        userId:
          type: long
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNo:
          type: string
        petList:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    SellerDto:
      type: object
      properties:
        sellerId:
          type: long
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNo:
          type: string
        whatsappUrl:
          type: string

    SellerResponseDto:
      type: object
      properties:
        userId:
          type: long
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNo:
          type: string
        petList:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    Pet:
      type: object
      properties:
        petId:
          type: long
        name:
          type: string
        petType:
          type: string
        breed:
          type: string
        vaccination_status:
          type: boolean
        description:
          type: string
        age:
          type: integer
        status:
          type: string
        motherBreed:
          type: string
        fatherBreed:
          type: string
        location:
          type: string
        quality:
          type: string
        gender:
          type: string
        owner:
          $ref: '#/components/schemas/SellerDto'
        service:
          $ref: '#/components/schemas/PetService'
        imageUrls:
          type: array
          items:
            type: string

    PetService:
      type: object
      properties:
        serviceId:
          type: long
        serviceName:
          type: string
        serviceCode:
          type: string
        price:
          type: integer

    LoginRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    LoginSuccessResponseDto:
      type: object
      properties:
        token:
          type: string

    ErrorResponseDto:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        timestamp:
          type: string
        uuid:
          type: string

    PaginatedPetResponseDto:
      type: object
      properties:
        currentPage:
          type: int
        totalPages:
          type:
            int
        totalItems:
          type:
            long
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'

    CreateNewPetReqDto:
      type: object
      properties:
        petId:
          type: string
#          type: long
        ownerId:
          type: string
#          type: long
        name:
          type: string
        petType:
          type: string
        breed:
          type: string
        vaccination_status:
          type: boolean
        description:
          type: string
        ageInDays:
          type: string
        motherBreed:
          type: string
        fatherBreed:
          type: string
        serviceCode:
          type: string
        location:
          type: string
        quality:
          type: string
        price:
          type: string
        imageBlobs:
          type: array
          items:
            type: object
            properties:
              fileName:
                type: string
              blob:
                type: string
                format: byte
        imageUrls:
          type: array
          items:
            type: string